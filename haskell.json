{
	"data type": {
		"prefix": "data type",
		"body": "data ${1:Type} = ${0:Other}",
		"description": "data … = …",
	},
	"generalized data type": {
		"prefix": "generalized data type",
		"body": [
			"data ${1:Type} where",
			"\t${0:Constructor} :: ${0:Other}",
		],
		"description": "data … where …",
	},
	"new type": {
		"prefix": "new type",
		"body": "newtype ${1:Type} = ${0:Other}",
		"description": "newtype … = …",
	},
	"type alias": {
		"prefix": "type alias",
		"body": "type ${1:Type} = ${0:Other}",
		"description": "type … = …",
	},
	"function": {
		"prefix": "function",
		"body": [
			"${1:name} :: ${2:_}",
			"${1:name} ${3:pattern} = ${4:_}",
		],
		"description": "… :: …\n… = …",
	},
	"function signature": {
		"prefix": "function signature",
		"body": "${1:name} :: ${2:_}",
		"description": "… :: …",
	},
	"function definition": {
		"prefix": "function definition",
		"body": "${1:name} ${3:pattern} = ${4:_}",
		"description": "… = …",
	},
	"to": {
		"prefix": "to",
		"body": "${1:_} -> ${2:_}",
		"description": "… -> …",
	},
	"from": {
		"prefix": "from",
		"body": "${1:_} <- ${2:_}",
		"description": "… <- …",
	},
	"annotated expression": {
		"prefix": "annotated expression",
		"body": "${1:expr} :: ${2:Type}",
		"description": "… :: …",
	},
	"parenthesized expression": {
		"prefix": "parenthesized expression",
		"body": "(${1:_})",
		"description": "(…)",
	},
	"lambda": {
		"prefix": "lambda",
		"body": "\\\\${1:pattern} -> ${0:_}",
		"description": "\\… -> …",
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ${1:condition}",
			"\tthen ${2:expression}",
			"\telse ${3:expression}",
		],
		"description": "if … then … else …",
	},
	"let": {
		"prefix": "let",
		"body": "let\n\t${1:name} = ${2:_}\n\tin ${0:_}",
		"description": "let … = … in …",
	},
	"where": {
		"prefix": "where",
		"body": "where\n\t${0:definitions}",
		"description": "where …",
	},
	"type family": {
		"prefix": "type family",
		"body": "type family ${1:Type} ${0:pattern}",
		"description": "type family …"
	},
	"type instance": {
		"prefix": "type instance",
		"body": "type instance ${1:Type} ${0:pattern} = ${0:Other}",
		"description": "type instance …"
	},
	"closed type family": {
		"prefix": "closed type family",
		"body": "type family ${1:Type} ${2:arguments} where\n\t${1:Type} ${3:pattern} = ${4:Type}\n\t${1:Type} ${5:otherwise} = ${6:Type}",
		"description": "type family …"
	},
	"class": {
		"prefix": "class",
		"body": "class ${1:Class} where\n\t${0:definition}",
		"description": "class …"
	},
	"instance": {
		"prefix": "instance",
		"body": "instance ${1:Class} ${2:Type} where\n\t${0:definition}",
		"description": "instance …"
	},
	"has instance": {
		"prefix": "has instance",
		"body": "(${1:Class}) => $0",
		"description": "Type Constraint"
	},
	"guard": {
		"prefix": "guard",
		"body": "| ${1:predicate} = ${0:definition}",
		"description": "Guard"
	},
	"haddock": {
		"prefix": "haddock",
		"body": "| ${0:documentation}",
		"description": "Haddock Before"
	},
	"haddock post": {
		"prefix": "haddock post",
		"body": "^ ${0:documentation}",
		"description": "Haddock After"
	},
	"list comprehension": {
		"prefix": "list",
		"body": "[ ${1:expression} | ${2:name} <- ${3:expression}${4/.+/, /}${4:condition} ",
		"description": "List Comprehension"
	},
	"case": {
		"prefix": "case",
		"body": "case ${1:expression} of\n\t${2:pattern} -> ${3:expression}\n\t${4:otherwise} -> ${5:expression}",
		"description": "case … of …"
	},
	"deriving": {
		"prefix": "deriving",
		"body": "deriving (${0:Class})",
		"description": "deriving …"
	},
	"do": {
		"prefix": "do",
		"body": "do\n\t${1:return ${0:expression}}",
		"description": "do …"
	}
}